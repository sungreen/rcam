diff --git a/intern/cycles/blender/camera.cpp b/intern/cycles/blender/camera.cpp
index d7def9fdb7c..02ada2e1ffc 100644
--- a/intern/cycles/blender/camera.cpp
+++ b/intern/cycles/blender/camera.cpp
@@ -18,6 +18,7 @@ CCL_NAMESPACE_BEGIN
 struct BlenderCamera {
   float nearclip;
   float farclip;
+  float cam_factor;
 
   CameraType type;
   float ortho_scale;
@@ -176,6 +177,7 @@ static void blender_camera_from_object(BlenderCamera *bcam,
 
     bcam->nearclip = b_camera.clip_start();
     bcam->farclip = b_camera.clip_end();
+    bcam->cam_factor = b_camera.cam_factor();
 
     switch (b_camera.type()) {
       case BL::Camera::type_ORTHO:
diff --git a/release/scripts/startup/bl_ui/properties_data_camera.py b/release/scripts/startup/bl_ui/properties_data_camera.py
index 963ffc60806..065fc223e0f 100644
--- a/release/scripts/startup/bl_ui/properties_data_camera.py
+++ b/release/scripts/startup/bl_ui/properties_data_camera.py
@@ -71,6 +71,7 @@ class DATA_PT_lens(CameraButtonsPanel, Panel):
             elif cam.lens_unit == 'FOV':
                 col.prop(cam, "angle")
             col.prop(cam, "lens_unit")
+            col.prop(cam, "cam_factor")
 
         elif cam.type == 'ORTHO':
             col.prop(cam, "ortho_scale")
diff --git a/source/blender/blenkernel/BKE_camera.h b/source/blender/blenkernel/BKE_camera.h
index afe0eb35c4d..a5d19a5a982 100644
--- a/source/blender/blenkernel/BKE_camera.h
+++ b/source/blender/blenkernel/BKE_camera.h
@@ -61,6 +61,7 @@ typedef struct CameraParams {
   /* clipping */
   float clip_start;
   float clip_end;
+  float cam_factor;
 
   /* computed viewplane */
   float ycor;
@@ -70,6 +71,8 @@ typedef struct CameraParams {
 
   /* computed matrix */
   float winmat[4][4];
+  char _pad[4];
+
 } CameraParams;
 
 /* Values for CameraParams.zoom, need to be taken into account for some operations. */
diff --git a/source/blender/blenkernel/intern/camera.c b/source/blender/blenkernel/intern/camera.c
index 7c1193d80ab..2d0a88d11a2 100644
--- a/source/blender/blenkernel/intern/camera.c
+++ b/source/blender/blenkernel/intern/camera.c
@@ -280,6 +280,7 @@ void BKE_camera_params_init(CameraParams *params)
   /* fallback for non camera objects */
   params->clip_start = 0.1f;
   params->clip_end = 100.0f;
+  params->cam_factor = 0.0f;
 }
 
 void BKE_camera_params_from_object(CameraParams *params, const Object *cam_ob)
@@ -307,6 +308,7 @@ void BKE_camera_params_from_object(CameraParams *params, const Object *cam_ob)
 
     params->clip_start = cam->clip_start;
     params->clip_end = cam->clip_end;
+    params->cam_factor = cam->cam_factor;
   }
   else if (cam_ob->type == OB_LAMP) {
     /* light object */
@@ -330,6 +332,7 @@ void BKE_camera_params_from_view3d(CameraParams *params,
   params->lens = v3d->lens;
   params->clip_start = v3d->clip_start;
   params->clip_end = v3d->clip_end;
+  params->cam_factor = v3d->cam_factor;
 
   if (rv3d->persp == RV3D_CAMOB) {
     /* camera view */
@@ -353,6 +356,7 @@ void BKE_camera_params_from_view3d(CameraParams *params,
     /* Halve, otherwise too extreme low Z-buffer quality. */
     params->clip_end *= 0.5f;
     params->clip_start = -params->clip_end;
+    params->cam_factor = 0.0f;
 
     params->is_ortho = true;
     /* make sure any changes to this match ED_view3d_radius_to_dist_ortho() */
@@ -451,7 +455,8 @@ void BKE_camera_params_compute_matrix(CameraParams *params)
                    viewplane.ymin,
                    viewplane.ymax,
                    params->clip_start,
-                   params->clip_end);
+                   params->clip_end,
+                   params->cam_factor);
   }
 }
 
diff --git a/source/blender/blenkernel/intern/ipo.c b/source/blender/blenkernel/intern/ipo.c
index a21033a8b91..1b0ae5e865e 100644
--- a/source/blender/blenkernel/intern/ipo.c
+++ b/source/blender/blenkernel/intern/ipo.c
@@ -792,6 +792,8 @@ static const char *camera_adrcodes_to_paths(int adrcode, int *array_index)
       return "clip_start";
     case CAM_END:
       return "clip_end";
+    case CAM_FAC:
+      return "cam_factor";
 
 #if 0  /* XXX these are not defined in RNA */
     case CAM_YF_APERT:
diff --git a/source/blender/blenkernel/intern/tracking.c b/source/blender/blenkernel/intern/tracking.c
index f53e32a70c2..fb91ed1e4c5 100644
--- a/source/blender/blenkernel/intern/tracking.c
+++ b/source/blender/blenkernel/intern/tracking.c
@@ -382,7 +382,7 @@ void BKE_tracking_get_projection_matrix(MovieTracking *tracking,
 {
   MovieReconstructedCamera *camera;
   float lens = tracking->camera.focal * tracking->camera.sensor_width / (float)winx;
-  float viewfac, pixsize, left, right, bottom, top, clipsta, clipend;
+  float viewfac, pixsize, left, right, bottom, top, clipsta, clipend, cam_factor;
   float winmat[4][4];
   float ycor = 1.0f / tracking->camera.pixel_aspect;
   float shiftx, shifty, winside = (float)min_ii(winx, winy);
@@ -391,6 +391,7 @@ void BKE_tracking_get_projection_matrix(MovieTracking *tracking,
 
   clipsta = 0.1f;
   clipend = 1000.0f;
+  cam_factor = 0.0f;
 
   if (winx >= winy) {
     viewfac = (lens * winx) / tracking->camera.sensor_width;
@@ -411,7 +412,7 @@ void BKE_tracking_get_projection_matrix(MovieTracking *tracking,
   bottom *= pixsize;
   top *= pixsize;
 
-  perspective_m4(winmat, left, right, bottom, top, clipsta, clipend);
+  perspective_m4(winmat, left, right, bottom, top, clipsta, clipend, cam_factor);
 
   camera = BKE_tracking_camera_get_reconstructed(tracking, tracking_object, framenr);
 
diff --git a/source/blender/blenlib/BLI_math_geom.h b/source/blender/blenlib/BLI_math_geom.h
index d056c42e019..d451476f7de 100644
--- a/source/blender/blenlib/BLI_math_geom.h
+++ b/source/blender/blenlib/BLI_math_geom.h
@@ -1086,14 +1086,17 @@ void perspective_m4(float mat[4][4],
                     float bottom,
                     float top,
                     float nearClip,
-                    float farClip);
+                    float farClip,
+                    float cam_factor);
 void perspective_m4_fov(float mat[4][4],
                         float angle_left,
                         float angle_right,
                         float angle_up,
                         float angle_down,
                         float nearClip,
-                        float farClip);
+                        float farClip,
+                        float cam_factor);
+                        
 /**
  * Matches `glOrtho` result.
  */
diff --git a/source/blender/blenlib/BLI_math_matrix.h b/source/blender/blenlib/BLI_math_matrix.h
index 538474f58b6..c5347d82e82 100644
--- a/source/blender/blenlib/BLI_math_matrix.h
+++ b/source/blender/blenlib/BLI_math_matrix.h
@@ -564,6 +564,7 @@ bool is_zero_m4(const float mat[4][4]);
 bool equals_m3m3(const float mat1[3][3], const float mat2[3][3]);
 bool equals_m4m4(const float mat1[4][4], const float mat2[4][4]);
 
+bool universe_perspective(float mat[4][4], const float left, const float right, const float bottom, const float top, const float near, const float far, const float cam_factor);
 /**
  * #SpaceTransform struct encapsulates all needed data to convert between two coordinate spaces
  * (where conversion can be represented by a matrix multiplication).
diff --git a/source/blender/blenlib/intern/math_geom.c b/source/blender/blenlib/intern/math_geom.c
index 08152976f7d..15d34528a62 100644
--- a/source/blender/blenlib/intern/math_geom.c
+++ b/source/blender/blenlib/intern/math_geom.c
@@ -4545,8 +4545,11 @@ void perspective_m4(float mat[4][4],
                     const float bottom,
                     const float top,
                     const float nearClip,
-                    const float farClip)
+                    const float farClip,
+                    const float cam_factor)
 {
+  universe_perspective(mat, left, right, bottom, top, nearClip, farClip, cam_factor);
+  return;
   const float Xdelta = right - left;
   const float Ydelta = top - bottom;
   const float Zdelta = farClip - nearClip;
@@ -4571,7 +4574,8 @@ void perspective_m4_fov(float mat[4][4],
                         const float angle_up,
                         const float angle_down,
                         const float nearClip,
-                        const float farClip)
+                        const float farClip,
+                        const float cam_factor)
 {
   const float tan_angle_left = tanf(angle_left);
   const float tan_angle_right = tanf(angle_right);
@@ -4579,7 +4583,7 @@ void perspective_m4_fov(float mat[4][4],
   const float tan_angle_top = tanf(angle_down);
 
   perspective_m4(
-      mat, tan_angle_left, tan_angle_right, tan_angle_top, tan_angle_bottom, nearClip, farClip);
+      mat, tan_angle_left, tan_angle_right, tan_angle_top, tan_angle_bottom, nearClip, farClip, cam_factor);
   mat[0][0] /= nearClip;
   mat[1][1] /= nearClip;
 }
diff --git a/source/blender/blenlib/intern/math_matrix.c b/source/blender/blenlib/intern/math_matrix.c
index d997eae26fb..1ef02992f90 100644
--- a/source/blender/blenlib/intern/math_matrix.c
+++ b/source/blender/blenlib/intern/math_matrix.c
@@ -3201,6 +3201,7 @@ void invert_m3_m3_safe_ortho(float inverse[3][3], const float mat[3][3])
   }
 }
 
+
 /** \} */
 
 void BLI_space_transform_from_matrices(SpaceTransform *data,
@@ -3244,3 +3245,43 @@ void BLI_space_transform_invert_normal(const SpaceTransform *data, float no[3])
   mul_mat3_m4_v3(((SpaceTransform *)data)->target2local, no);
   normalize_v3(no);
 }
+
+bool universe_perspective(float mat[4][4], const float left, const float right, const float bottom, const float top, const float near, const float far, const float cam_factor)
+{
+    float A, B, C, D, Ws, We, width, height, depth;
+    //Ws = near+(1.0f-near)*cam_factor;
+    //We = far+((near/far)-far)*cam_factor;
+    width = right-left;
+    height = top-bottom;
+    depth = far-near;
+
+    Ws = near+depth*cam_factor;
+    We = far-depth*cam_factor;
+
+    C = -(We-Ws)/depth;
+    D = We+C*far;
+    A = -(We+Ws)/depth;
+    B = We+A*far;
+
+    mat[0][0] = 2*near/*Ws*//width;
+    mat[1][0] = 0.0f;
+    mat[2][0] = -C*(right + left)/width;
+    mat[3][0] = D*(right + left)/width;
+
+    mat[0][1] = 0.0f;
+    mat[1][1] = 2*near/*Ws*//height;
+    mat[2][1] = -C*(top + bottom)/height;
+    mat[3][1] = D*(top + bottom)/height;
+
+    mat[0][2] = 0.0f;
+    mat[1][2] = 0.0f;
+    mat[2][2] = A;
+    mat[3][2] = B;
+
+    mat[0][3] = 0.0f;
+    mat[1][3] = 0.0f;
+    mat[2][3] = C;
+    mat[3][3] = D;
+
+    return true;
+}
diff --git a/source/blender/blenloader/intern/versioning_280.c b/source/blender/blenloader/intern/versioning_280.c
index ffb87949234..25d4bcdd877 100644
--- a/source/blender/blenloader/intern/versioning_280.c
+++ b/source/blender/blenloader/intern/versioning_280.c
@@ -4919,6 +4919,7 @@ void blo_do_versions_280(FileData *fd, Library *UNUSED(lib), Main *bmain)
                                               V3D_OFSDRAW_SHOW_ANNOTATION);
         wm->xr.session_settings.clip_start = v3d_default->clip_start;
         wm->xr.session_settings.clip_end = v3d_default->clip_end;
+        wm->xr.session_settings.cam_factor = v3d_default->cam_factor;
 
         wm->xr.session_settings.flag = XR_SESSION_USE_POSITION_TRACKING;
       }
diff --git a/source/blender/blenloader/intern/versioning_defaults.cc b/source/blender/blenloader/intern/versioning_defaults.cc
index cfa2d01697f..f8893635fba 100644
--- a/source/blender/blenloader/intern/versioning_defaults.cc
+++ b/source/blender/blenloader/intern/versioning_defaults.cc
@@ -189,6 +189,7 @@ static void blo_update_defaults_screen(bScreen *screen,
       /* Remove dither pattern in wireframe mode. */
       v3d->shading.xray_alpha_wire = 0.0f;
       v3d->clip_start = 0.01f;
+      v3d->cam_factor = 0.0f;
       /* Skip startups that use the viewport color by default. */
       if (v3d->shading.background_type != V3D_SHADING_BACKGROUND_VIEWPORT) {
         copy_v3_fl(v3d->shading.background_color, 0.05f);
diff --git a/source/blender/draw/engines/eevee/eevee_lightprobes.c b/source/blender/draw/engines/eevee/eevee_lightprobes.c
index ea22d2aa2e4..fd0a83769c2 100644
--- a/source/blender/draw/engines/eevee/eevee_lightprobes.c
+++ b/source/blender/draw/engines/eevee/eevee_lightprobes.c
@@ -755,7 +755,7 @@ static void render_cubemap(void (*callback)(int face, EEVEE_BakeRenderData *user
   DRWView **views = do_culling ? stl->g_data->bake_views : stl->g_data->world_views;
 
   float winmat[4][4], viewmat[4][4];
-  perspective_m4(winmat, -near, near, -near, near, near, far);
+  perspective_m4(winmat, -near, near, -near, near, near, far, 0.0f);
 
   /* Prepare views at the same time for faster culling. */
   for (int i = 0; i < 6; i++) {
diff --git a/source/blender/draw/engines/eevee/eevee_shadows_cube.c b/source/blender/draw/engines/eevee/eevee_shadows_cube.c
index b18644c7d98..3dfdc0bc279 100644
--- a/source/blender/draw/engines/eevee/eevee_shadows_cube.c
+++ b/source/blender/draw/engines/eevee/eevee_shadows_cube.c
@@ -134,7 +134,7 @@ static void eevee_ensure_cube_views(
     side *= ((float)cube_res + 1.0f) / (float)(cube_res);
   }
 
-  perspective_m4(winmat, -side, side, -side, side, near, far);
+  perspective_m4(winmat, -side, side, -side, side, near, far, 0.0f);
 
   for (int i = 0; i < 6; i++) {
     float tmp[4][4];
diff --git a/source/blender/draw/engines/eevee_next/eevee_camera.cc b/source/blender/draw/engines/eevee_next/eevee_camera.cc
index 4331db4bc4c..489da301f72 100644
--- a/source/blender/draw/engines/eevee_next/eevee_camera.cc
+++ b/source/blender/draw/engines/eevee_next/eevee_camera.cc
@@ -104,7 +104,7 @@ void Camera::sync()
   else {
     data.viewmat = float4x4::identity();
     data.viewinv = float4x4::identity();
-    perspective_m4(data.winmat.ptr(), -0.1f, 0.1f, -0.1f, 0.1f, 0.1f, 1.0f);
+    /* SUNGREEN */ perspective_m4(data.winmat.ptr(), -0.1f, 0.1f, -0.1f, 0.1f, 0.1f, 1.0f, 0.0f);
     data.wininv = data.winmat.inverted();
     data.persmat = data.winmat * data.viewmat;
     data.persinv = data.persmat.inverted();
diff --git a/source/blender/draw/engines/eevee_next/eevee_camera.hh b/source/blender/draw/engines/eevee_next/eevee_camera.hh
index c1d65dbf31e..1021312b337 100644
--- a/source/blender/draw/engines/eevee_next/eevee_camera.hh
+++ b/source/blender/draw/engines/eevee_next/eevee_camera.hh
@@ -49,7 +49,7 @@ inline constexpr float cubeface_mat[6][4][4] = {
 inline void cubeface_winmat_get(float4x4 &winmat, float near, float far)
 {
   /* Simple 90° FOV projection. */
-  perspective_m4(winmat.ptr(), -near, near, -near, near, near, far);
+  /* SUNGREEN */ perspective_m4(winmat.ptr(), -near, near, -near, near, near, far, 0);
 }
 
 /* -------------------------------------------------------------------- */
diff --git a/source/blender/draw/engines/eevee_next/eevee_view.cc b/source/blender/draw/engines/eevee_next/eevee_view.cc
index 3a4fb9d4c20..80b82bda24a 100644
--- a/source/blender/draw/engines/eevee_next/eevee_view.cc
+++ b/source/blender/draw/engines/eevee_next/eevee_view.cc
@@ -66,7 +66,7 @@ void ShadingView::sync()
     float side = cam.clip_near * 1.05f;
     float near = cam.clip_near;
     float far = cam.clip_far;
-    perspective_m4(winmat.ptr(), -side, side, -side, side, near, far);
+    /* SUNGREEN */ perspective_m4(winmat.ptr(), -side, side, -side, side, near, far, 0.0f);
     viewmat = face_matrix_ * cam.viewmat;
   }
   else {
diff --git a/source/blender/draw/intern/draw_manager_data.cc b/source/blender/draw/intern/draw_manager_data.cc
index c7b1ddffab3..f9648265da5 100644
--- a/source/blender/draw/intern/draw_manager_data.cc
+++ b/source/blender/draw/intern/draw_manager_data.cc
@@ -2342,6 +2342,7 @@ void DRW_view_frustum_planes_get(const DRWView *view, float planes[6][4])
 bool DRW_view_is_persp_get(const DRWView *view)
 {
   view = (view) ? view : DST.view_default;
+  return (view->storage.winmat[3][3] != 1.0f) && (view->storage.winmat[2][3] != 0.0f);
   return view->storage.winmat[3][3] == 0.0f;
 }
 
diff --git a/source/blender/draw/intern/draw_manager_exec.c b/source/blender/draw/intern/draw_manager_exec.c
index 8b1b35b5f03..c9a4216b50a 100644
--- a/source/blender/draw/intern/draw_manager_exec.c
+++ b/source/blender/draw/intern/draw_manager_exec.c
@@ -481,9 +481,9 @@ static void draw_compute_culling(DRWView *view)
       cull->mask = 0;
     }
     else {
-      bool culled = !draw_culling_sphere_test(
-          &view->frustum_bsphere, view->frustum_planes, &cull->bsphere);
-
+//      bool culled = !draw_culling_sphere_test(
+//          &view->frustum_bsphere, view->frustum_planes, &cull->bsphere);
+    bool culled = false;
 #ifdef DRW_DEBUG_CULLING
       if (G.debug_value != 0) {
         if (culled) {
diff --git a/source/blender/editors/gpencil/gpencil_fill.c b/source/blender/editors/gpencil/gpencil_fill.c
index d08c95cd5ae..dea2b1f4107 100644
--- a/source/blender/editors/gpencil/gpencil_fill.c
+++ b/source/blender/editors/gpencil/gpencil_fill.c
@@ -1243,7 +1243,7 @@ static bool gpencil_render_offscreen(tGPDfill *tgpf)
   ImBuf *ibuf = IMB_allocImBuf(tgpf->sizex, tgpf->sizey, 32, flag);
 
   rctf viewplane;
-  float clip_start, clip_end;
+  float clip_start, clip_end, cam_factor;
 
   is_ortho = ED_view3d_viewplane_get(tgpf->depsgraph,
                                      tgpf->v3d,
@@ -1253,6 +1253,7 @@ static bool gpencil_render_offscreen(tGPDfill *tgpf)
                                      &viewplane,
                                      &clip_start,
                                      &clip_end,
+                                     &cam_factor,
                                      NULL);
 
   /* Rescale `viewplane` to fit all strokes. */
@@ -1285,7 +1286,8 @@ static bool gpencil_render_offscreen(tGPDfill *tgpf)
                    viewplane.ymin,
                    viewplane.ymax,
                    clip_start,
-                   clip_end);
+                   clip_end,
+                   cam_factor);
   }
 
   GPU_matrix_push_projection();
diff --git a/source/blender/editors/include/ED_view3d.h b/source/blender/editors/include/ED_view3d.h
index 52aa5f56fee..8c685420660 100644
--- a/source/blender/editors/include/ED_view3d.h
+++ b/source/blender/editors/include/ED_view3d.h
@@ -745,6 +745,7 @@ bool ED_view3d_clip_range_get(const struct Depsgraph *depsgraph,
                               const struct RegionView3D *rv3d,
                               float *r_clipsta,
                               float *r_clipend,
+                              float *r_cam_factor,                              
                               bool use_ortho_factor);
 bool ED_view3d_viewplane_get(struct Depsgraph *depsgraph,
                              const struct View3D *v3d,
@@ -754,6 +755,7 @@ bool ED_view3d_viewplane_get(struct Depsgraph *depsgraph,
                              struct rctf *r_viewplane,
                              float *r_clipsta,
                              float *r_clipend,
+                             float *r_cam_factor,
                              float *r_pixsize);
 
 /**
diff --git a/source/blender/editors/include/ED_view3d_offscreen.h b/source/blender/editors/include/ED_view3d_offscreen.h
index 2217ace2e62..cfac41a320d 100644
--- a/source/blender/editors/include/ED_view3d_offscreen.h
+++ b/source/blender/editors/include/ED_view3d_offscreen.h
@@ -58,6 +58,7 @@ void ED_view3d_draw_offscreen_simple(struct Depsgraph *depsgraph,
                                      const float winmat[4][4],
                                      float clip_start,
                                      float clip_end,
+                                     float cam_factor,
                                      bool is_xr_surface,
                                      bool is_image_render,
                                      bool draw_background,
diff --git a/source/blender/editors/mesh/editmesh_knife.c b/source/blender/editors/mesh/editmesh_knife.c
index b7129b4b4d4..b10f25f0002 100644
--- a/source/blender/editors/mesh/editmesh_knife.c
+++ b/source/blender/editors/mesh/editmesh_knife.c
@@ -282,6 +282,8 @@ typedef struct KnifeTool_OpData {
   float ortho_extent_center[3];
 
   float clipsta, clipend;
+  float cam_factor;
+  char pad5[4];
 
   enum { MODE_IDLE, MODE_DRAGGING, MODE_CONNECT, MODE_PANNING } mode;
   bool is_drag_hold;
@@ -1560,7 +1562,7 @@ static bool knife_verts_edge_in_face(KnifeVert *v1, KnifeVert *v2, BMFace *f)
 static void knife_recalc_ortho(KnifeTool_OpData *kcd)
 {
   kcd->is_ortho = ED_view3d_clip_range_get(
-      kcd->vc.depsgraph, kcd->vc.v3d, kcd->vc.rv3d, &kcd->clipsta, &kcd->clipend, true);
+      kcd->vc.depsgraph, kcd->vc.v3d, kcd->vc.rv3d, &kcd->clipsta, &kcd->clipend, &kcd->cam_factor, true);
 }
 
 /** \} */
diff --git a/source/blender/editors/sculpt_paint/paint_image_proj.cc b/source/blender/editors/sculpt_paint/paint_image_proj.cc
index 3d23cb46856..58f90b1d0ec 100644
--- a/source/blender/editors/sculpt_paint/paint_image_proj.cc
+++ b/source/blender/editors/sculpt_paint/paint_image_proj.cc
@@ -436,6 +436,8 @@ struct ProjPaintState {
   Material **mat_array;
 
   bool use_colormanagement;
+  float cam_factor;
+  char pad5[4];
 };
 
 union PixelPointer {
@@ -3726,7 +3728,7 @@ static void proj_paint_state_viewport_init(ProjPaintState *ps, const char symmet
     ED_view3d_ob_project_mat_get_from_obmat(ps->rv3d, ps->obmat, ps->projectMat);
 
     ps->is_ortho = ED_view3d_clip_range_get(
-        ps->depsgraph, ps->v3d, ps->rv3d, &ps->clip_start, &ps->clip_end, true);
+        ps->depsgraph, ps->v3d, ps->rv3d, &ps->clip_start, &ps->clip_end, &ps->cam_factor, true);
   }
   else {
     /* re-projection */
@@ -6320,6 +6322,7 @@ static int texture_paint_image_from_view_exec(bContext *C, wmOperator *op)
     IDProperty *view_data;
     bool is_ortho;
     float *array;
+    float cam_factor;
 
     val.array.len = PROJ_VIEW_DATA_SIZE;
     val.array.type = IDP_FLOAT;
@@ -6330,7 +6333,7 @@ static int texture_paint_image_from_view_exec(bContext *C, wmOperator *op)
     array += sizeof(rv3d->winmat) / sizeof(float);
     memcpy(array, rv3d->viewmat, sizeof(rv3d->viewmat));
     array += sizeof(rv3d->viewmat) / sizeof(float);
-    is_ortho = ED_view3d_clip_range_get(depsgraph, v3d, rv3d, &array[0], &array[1], true);
+    is_ortho = ED_view3d_clip_range_get(depsgraph, v3d, rv3d, &array[0], &array[1], &cam_factor, true);
     /* using float for a bool is dodgy but since its an extra member in the array...
      * easier than adding a single bool prop */
     array[2] = is_ortho ? 1.0f : 0.0f;
diff --git a/source/blender/editors/space_view3d/view3d_draw.cc b/source/blender/editors/space_view3d/view3d_draw.cc
index 4fed15ccf24..e9ecb1fdabc 100644
--- a/source/blender/editors/space_view3d/view3d_draw.cc
+++ b/source/blender/editors/space_view3d/view3d_draw.cc
@@ -404,6 +404,7 @@ static void view3d_camera_border(const Scene *scene,
   /* fallback for non camera objects */
   params.clip_start = v3d->clip_start;
   params.clip_end = v3d->clip_end;
+  params.cam_factor = v3d->cam_factor;
   BKE_camera_params_from_object(&params, camera_eval);
   if (no_shift) {
     params.shiftx = 0.0f;
@@ -1753,6 +1754,7 @@ void ED_view3d_draw_offscreen_simple(Depsgraph *depsgraph,
                                      const float winmat[4][4],
                                      float clip_start,
                                      float clip_end,
+                                     float cam_factor,
                                      bool is_xr_surface,
                                      bool is_image_render,
                                      bool draw_background,
@@ -1827,6 +1829,7 @@ void ED_view3d_draw_offscreen_simple(Depsgraph *depsgraph,
   rv3d.persp = RV3D_PERSP;
   v3d.clip_start = clip_start;
   v3d.clip_end = clip_end;
+  v3d.cam_factor = cam_factor;
   /* Actually not used since we pass in the projection matrix. */
   v3d.lens = 0;
 
@@ -1908,6 +1911,7 @@ ImBuf *ED_view3d_draw_offscreen_imbuf(Depsgraph *depsgraph,
     /* fallback for non camera objects */
     params.clip_start = v3d->clip_start;
     params.clip_end = v3d->clip_end;
+    params.cam_factor = v3d->cam_factor;
     BKE_camera_params_from_object(&params, camera_eval);
     BKE_camera_multiview_params(&scene->r, &params, camera_eval, viewname);
     BKE_camera_params_compute_viewplane(&params, sizex, sizey, scene->r.xasp, scene->r.yasp);
@@ -1918,10 +1922,10 @@ ImBuf *ED_view3d_draw_offscreen_imbuf(Depsgraph *depsgraph,
   }
   else {
     rctf viewplane;
-    float clip_start, clipend;
+    float clip_start, clipend, cam_factor;
 
     is_ortho = ED_view3d_viewplane_get(
-        depsgraph, v3d, rv3d, sizex, sizey, &viewplane, &clip_start, &clipend, nullptr);
+        depsgraph, v3d, rv3d, sizex, sizey, &viewplane, &clip_start, &clipend, &cam_factor, nullptr);
     if (is_ortho) {
       orthographic_m4(winmat,
                       viewplane.xmin,
@@ -1938,7 +1942,8 @@ ImBuf *ED_view3d_draw_offscreen_imbuf(Depsgraph *depsgraph,
                      viewplane.ymin,
                      viewplane.ymax,
                      clip_start,
-                     clipend);
+                     clipend,
+                     cam_factor);
     }
   }
 
@@ -2085,6 +2090,7 @@ ImBuf *ED_view3d_draw_offscreen_imbuf_simple(Depsgraph *depsgraph,
     copy_m4_m4(rv3d.winmat, params.winmat);
     v3d.clip_start = params.clip_start;
     v3d.clip_end = params.clip_end;
+    v3d.cam_factor = params.cam_factor;
     v3d.lens = params.lens;
   }
 
@@ -2615,3 +2621,4 @@ bool ED_view3d_calc_render_border(
 }
 
 /** \} */
+
diff --git a/source/blender/editors/space_view3d/view3d_project.c b/source/blender/editors/space_view3d/view3d_project.c
index 2718f14c855..62338fb1aad 100644
--- a/source/blender/editors/space_view3d/view3d_project.c
+++ b/source/blender/editors/space_view3d/view3d_project.c
@@ -326,7 +326,7 @@ static void view3d_win_to_ray_segment(const struct Depsgraph *depsgraph,
                                       float r_ray_end[3])
 {
   RegionView3D *rv3d = region->regiondata;
-  float _ray_co[3], _ray_dir[3], start_offset, end_offset;
+  float _ray_co[3], _ray_dir[3], start_offset, end_offset, cam_factor;
 
   if (!r_ray_co) {
     r_ray_co = _ray_co;
@@ -343,7 +343,7 @@ static void view3d_win_to_ray_segment(const struct Depsgraph *depsgraph,
     start_offset = -end_offset;
   }
   else {
-    ED_view3d_clip_range_get(depsgraph, v3d, rv3d, &start_offset, &end_offset, false);
+    ED_view3d_clip_range_get(depsgraph, v3d, rv3d, &start_offset, &end_offset, &cam_factor, false);
   }
 
   if (r_ray_start) {
diff --git a/source/blender/editors/space_view3d/view3d_utils.c b/source/blender/editors/space_view3d/view3d_utils.c
index fc26e6b4a06..8bab5602975 100644
--- a/source/blender/editors/space_view3d/view3d_utils.c
+++ b/source/blender/editors/space_view3d/view3d_utils.c
@@ -112,6 +112,7 @@ bool ED_view3d_clip_range_get(const Depsgraph *depsgraph,
                               const RegionView3D *rv3d,
                               float *r_clipsta,
                               float *r_clipend,
+                              float *r_cam_factor,
                               const bool use_ortho_factor)
 {
   CameraParams params;
@@ -131,6 +132,9 @@ bool ED_view3d_clip_range_get(const Depsgraph *depsgraph,
   if (r_clipend) {
     *r_clipend = params.clip_end;
   }
+  if (r_cam_factor) {
+    *r_cam_factor = params.cam_factor;
+  }
 
   return params.is_ortho;
 }
@@ -143,6 +147,7 @@ bool ED_view3d_viewplane_get(Depsgraph *depsgraph,
                              rctf *r_viewplane,
                              float *r_clip_start,
                              float *r_clip_end,
+                             float *r_cam_factor,
                              float *r_pixsize)
 {
   CameraParams params;
@@ -163,6 +168,9 @@ bool ED_view3d_viewplane_get(Depsgraph *depsgraph,
   if (r_pixsize) {
     *r_pixsize = params.viewdx;
   }
+  if (r_cam_factor) {
+    *r_cam_factor = params.cam_factor;
+  }
 
   return params.is_ortho;
 }
diff --git a/source/blender/editors/space_view3d/view3d_view.c b/source/blender/editors/space_view3d/view3d_view.c
index c630a1a5653..9a7ffa20959 100644
--- a/source/blender/editors/space_view3d/view3d_view.c
+++ b/source/blender/editors/space_view3d/view3d_view.c
@@ -309,11 +309,11 @@ void view3d_winmatrix_set(Depsgraph *depsgraph,
 {
   RegionView3D *rv3d = region->regiondata;
   rctf full_viewplane;
-  float clipsta, clipend;
+  float clipsta, clipend, cam_factor;
   bool is_ortho;
 
   is_ortho = ED_view3d_viewplane_get(
-      depsgraph, v3d, rv3d, region->winx, region->winy, &full_viewplane, &clipsta, &clipend, NULL);
+      depsgraph, v3d, rv3d, region->winx, region->winy, &full_viewplane, &clipsta, &clipend, &cam_factor, NULL);
   rv3d->is_persp = !is_ortho;
 
 #if 0
@@ -352,7 +352,7 @@ void view3d_winmatrix_set(Depsgraph *depsgraph,
   }
   else {
     GPU_matrix_frustum_set(
-        viewplane.xmin, viewplane.xmax, viewplane.ymin, viewplane.ymax, clipsta, clipend);
+        viewplane.xmin, viewplane.xmax, viewplane.ymin, viewplane.ymax, clipsta, clipend, cam_factor);
   }
 
   /* update matrix in 3d view region */
diff --git a/source/blender/freestyle/intern/blender_interface/BlenderStrokeRenderer.cpp b/source/blender/freestyle/intern/blender_interface/BlenderStrokeRenderer.cpp
index fa93a44af66..ab227550115 100644
--- a/source/blender/freestyle/intern/blender_interface/BlenderStrokeRenderer.cpp
+++ b/source/blender/freestyle/intern/blender_interface/BlenderStrokeRenderer.cpp
@@ -137,6 +137,7 @@ BlenderStrokeRenderer::BlenderStrokeRenderer(Render *re, int render_count)
   camera->ortho_scale = max(re->rectx, re->recty);
   camera->clip_start = 0.1f;
   camera->clip_end = 100.0f;
+  camera->cam_factor = 222222.0f;
 
   _z_delta = 0.00001f;
   _z = camera->clip_start + _z_delta;
diff --git a/source/blender/gpu/GPU_matrix.h b/source/blender/gpu/GPU_matrix.h
index 2a9c4a89b2a..f79136f9591 100644
--- a/source/blender/gpu/GPU_matrix.h
+++ b/source/blender/gpu/GPU_matrix.h
@@ -83,8 +83,8 @@ void GPU_matrix_ortho_set(float left, float right, float bottom, float top, floa
 void GPU_matrix_ortho_set_z(float near, float far);
 
 void GPU_matrix_frustum_set(
-    float left, float right, float bottom, float top, float near, float far);
-void GPU_matrix_perspective_set(float fovy, float aspect, float near, float far);
+    float left, float right, float bottom, float top, float near, float far, float cam_factor);
+void GPU_matrix_perspective_set(float fovy, float aspect, float near, float far, float cam_factor);
 
 /* 3D Projection between Window and World Space */
 
diff --git a/source/blender/gpu/intern/gpu_matrix.cc b/source/blender/gpu/intern/gpu_matrix.cc
index b46860cf0f4..d8724367e7b 100644
--- a/source/blender/gpu/intern/gpu_matrix.cc
+++ b/source/blender/gpu/intern/gpu_matrix.cc
@@ -420,18 +420,19 @@ void GPU_matrix_ortho_2d_set(float left, float right, float bottom, float top)
 }
 
 void GPU_matrix_frustum_set(
-    float left, float right, float bottom, float top, float near, float far)
+    float left, float right, float bottom, float top, float near, float far, float cam_factor)
 {
-  mat4_frustum_set(Projection, left, right, bottom, top, near, far);
+  //mat4_frustum_set(Projection, left, right, bottom, top, near, far);
+  perspective_m4(Projection, left, right, bottom, top, near, far, cam_factor);
   CHECKMAT(Projection);
   gpu_matrix_state_active_set_dirty(true);
 }
 
-void GPU_matrix_perspective_set(float fovy, float aspect, float near, float far)
+void GPU_matrix_perspective_set(float fovy, float aspect, float near, float far, float cam_factor)
 {
   float half_height = tanf(fovy * float(M_PI / 360.0)) * near;
   float half_width = half_height * aspect;
-  GPU_matrix_frustum_set(-half_width, +half_width, -half_height, +half_height, near, far);
+  GPU_matrix_frustum_set(-half_width, +half_width, -half_height, +half_height, near, far, cam_factor);
 }
 
 void GPU_matrix_look_at(float eyeX,
diff --git a/source/blender/io/collada/DocumentImporter.cpp b/source/blender/io/collada/DocumentImporter.cpp
index dae1c4ba894..ecd3e1fc943 100644
--- a/source/blender/io/collada/DocumentImporter.cpp
+++ b/source/blender/io/collada/DocumentImporter.cpp
@@ -848,6 +848,7 @@ bool DocumentImporter::writeCamera(const COLLADAFW::Camera *camera)
   cam->clip_start = camera->getNearClippingPlane().getValue();
   cam->clip_end = camera->getFarClippingPlane().getValue();
 
+
   COLLADAFW::Camera::CameraType type = camera->getCameraType();
   switch (type) {
     case COLLADAFW::Camera::ORTHOGRAPHIC: {
diff --git a/source/blender/makesdna/DNA_camera_defaults.h b/source/blender/makesdna/DNA_camera_defaults.h
index e43d2732bf0..c3c76c577a9 100644
--- a/source/blender/makesdna/DNA_camera_defaults.h
+++ b/source/blender/makesdna/DNA_camera_defaults.h
@@ -35,6 +35,7 @@
     .sensor_y = DEFAULT_SENSOR_HEIGHT, \
     .clip_start = 0.1f, \
     .clip_end = 1000.0f, \
+    /*.clip_fac = 0.0f,*/ \
     .drawsize = 1.0f, \
     .ortho_scale = 6.0, \
     .flag = CAM_SHOWPASSEPARTOUT, \
diff --git a/source/blender/makesdna/DNA_camera_types.h b/source/blender/makesdna/DNA_camera_types.h
index 10a6c936be1..588f81f7c5c 100644
--- a/source/blender/makesdna/DNA_camera_types.h
+++ b/source/blender/makesdna/DNA_camera_types.h
@@ -108,6 +108,9 @@ typedef struct Camera {
 
   /** Runtime data (keep last). */
   Camera_Runtime runtime;
+  char _pad2[4];
+  float cam_factor;
+  char _pad_cam_factor[8];
 } Camera;
 
 /* **************** CAMERA ********************* */
diff --git a/source/blender/makesdna/DNA_ipo_types.h b/source/blender/makesdna/DNA_ipo_types.h
index ef35b72d2ab..43ce7cd811b 100644
--- a/source/blender/makesdna/DNA_ipo_types.h
+++ b/source/blender/makesdna/DNA_ipo_types.h
@@ -337,7 +337,7 @@ typedef struct Ipo {
 #define CAM_LENS 1
 #define CAM_STA 2
 #define CAM_END 3
-
+#define CAM_FAC 23
 /* YAFRAY aperture & focal distance curves. */
 #define CAM_YF_APERT 4
 #define CAM_YF_FDIST 5
diff --git a/source/blender/makesdna/DNA_view3d_defaults.h b/source/blender/makesdna/DNA_view3d_defaults.h
index 0c0ed210a2b..0f3670ab979 100644
--- a/source/blender/makesdna/DNA_view3d_defaults.h
+++ b/source/blender/makesdna/DNA_view3d_defaults.h
@@ -88,6 +88,7 @@
     .lens = 50.0f, \
     .clip_start = 0.01f, \
     .clip_end = 1000.0f, \
+    /*.clip_fac = 0.0f,*/ \
  \
     .bundle_size = 0.2f, \
     .bundle_drawtype = OB_PLAINAXES, \
diff --git a/source/blender/makesdna/DNA_view3d_types.h b/source/blender/makesdna/DNA_view3d_types.h
index 0b7c483b7d0..02525d15a39 100644
--- a/source/blender/makesdna/DNA_view3d_types.h
+++ b/source/blender/makesdna/DNA_view3d_types.h
@@ -359,6 +359,9 @@ typedef struct View3D {
 
   /** Runtime evaluation data (keep last). */
   View3D_Runtime runtime;
+  char _pad5[4];
+  float cam_factor;
+  char cam_factor_pad[8];
 } View3D;
 
 /** #View3D.stereo3d_flag */
diff --git a/source/blender/makesdna/DNA_xr_types.h b/source/blender/makesdna/DNA_xr_types.h
index 44419c9763f..371cd6261f8 100644
--- a/source/blender/makesdna/DNA_xr_types.h
+++ b/source/blender/makesdna/DNA_xr_types.h
@@ -33,10 +33,10 @@ typedef struct XrSessionSettings {
   char _pad2[2];
 
   /** Clipping distance. */
-  float clip_start, clip_end;
+  float clip_start, clip_end, cam_factor;
 
   int flag;
-
+  char _pad3[4];
   /** Object type settings to apply to VR view (unlike shading, not shared with window 3D-View). */
   int object_type_exclude_viewport;
   int object_type_exclude_select;
diff --git a/source/blender/makesdna/intern/dna_rename_defs.h b/source/blender/makesdna/intern/dna_rename_defs.h
index b2bf0aead90..be11cbe0b80 100644
--- a/source/blender/makesdna/intern/dna_rename_defs.h
+++ b/source/blender/makesdna/intern/dna_rename_defs.h
@@ -56,6 +56,7 @@ DNA_STRUCT_RENAME_ELEM(BrushGpencilSettings, gradient_s, aspect_ratio)
 DNA_STRUCT_RENAME_ELEM(Camera, YF_dofdist, dof_distance)
 DNA_STRUCT_RENAME_ELEM(Camera, clipend, clip_end)
 DNA_STRUCT_RENAME_ELEM(Camera, clipsta, clip_start)
+DNA_STRUCT_RENAME_ELEM(Camera, camfactor, cam_factor)
 DNA_STRUCT_RENAME_ELEM(Collection, dupli_ofs, instance_offset)
 DNA_STRUCT_RENAME_ELEM(Curve, ext1, extrude)
 DNA_STRUCT_RENAME_ELEM(Curve, ext2, bevel_radius)
diff --git a/source/blender/makesrna/intern/rna_camera.c b/source/blender/makesrna/intern/rna_camera.c
index a1aa3261747..d4f6f6b0501 100644
--- a/source/blender/makesrna/intern/rna_camera.c
+++ b/source/blender/makesrna/intern/rna_camera.c
@@ -616,6 +616,12 @@ void RNA_def_camera(BlenderRNA *brna)
   RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
 
   /* Number values */
+  prop = RNA_def_property(srna, "cam_factor", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, NULL, "cam_factor");
+  RNA_def_property_range(prop, 0.0f, 1.0f);
+  RNA_def_property_ui_range(prop, 0.0f, 1.0f, 1, 3);
+  RNA_def_property_ui_text(prop, "Reverse factor", "Reverse factor");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
 
   prop = RNA_def_property(srna, "passepartout_alpha", PROP_FLOAT, PROP_FACTOR);
   RNA_def_property_float_sdna(prop, NULL, "passepartalpha");
diff --git a/source/blender/render/intern/initrender.cc b/source/blender/render/intern/initrender.cc
index 591791587fe..f12b0f8d12a 100644
--- a/source/blender/render/intern/initrender.cc
+++ b/source/blender/render/intern/initrender.cc
@@ -176,6 +176,7 @@ void RE_SetCamera(Render *re, const Object *cam_ob)
   copy_m4_m4(re->winmat, params.winmat);
   re->clip_start = params.clip_start;
   re->clip_end = params.clip_end;
+  re->cam_factor = params.cam_factor;
   re->viewplane = params.viewplane;
 }
 
@@ -188,9 +189,11 @@ void RE_GetCameraWindow(struct Render *re, const struct Object *camera, float r_
 void RE_GetCameraWindowWithOverscan(const struct Render *re, float overscan, float r_winmat[4][4])
 {
   CameraParams params;
-  params.is_ortho = re->winmat[3][3] != 0.0f;
+  //params.is_ortho = re->winmat[3][3] != 0.0f;
+  params.is_ortho = re->winmat[3][3] == 1.0f;
   params.clip_start = re->clip_start;
   params.clip_end = re->clip_end;
+  params.cam_factor = re->cam_factor;
   params.viewplane = re->viewplane;
 
   overscan *= max_ff(BLI_rctf_size_x(&params.viewplane), BLI_rctf_size_y(&params.viewplane));
diff --git a/source/blender/render/intern/render_types.h b/source/blender/render/intern/render_types.h
index 418acbca3b1..00dad47fd1f 100644
--- a/source/blender/render/intern/render_types.h
+++ b/source/blender/render/intern/render_types.h
@@ -72,6 +72,7 @@ struct Render {
   /* Clipping. */
   float clip_start;
   float clip_end;
+  float cam_factor;
 
   /* main, scene, and its full copy of renderdata and world */
   struct Main *main;
diff --git a/source/blender/windowmanager/xr/intern/wm_xr_draw.c b/source/blender/windowmanager/xr/intern/wm_xr_draw.c
index 6e32c5a0aae..ea149f89aff 100644
--- a/source/blender/windowmanager/xr/intern/wm_xr_draw.c
+++ b/source/blender/windowmanager/xr/intern/wm_xr_draw.c
@@ -102,7 +102,8 @@ static void wm_xr_draw_matrices_create(const wmXrDrawData *draw_data,
                      draw_view->fov.angle_up,
                      draw_view->fov.angle_down,
                      session_settings->clip_start,
-                     session_settings->clip_end);
+                     session_settings->clip_end,
+                     session_settings->cam_factor);
 }
 
 static void wm_xr_draw_viewport_buffers_to_active_framebuffer(
@@ -169,6 +170,7 @@ void wm_xr_draw_view(const GHOST_XrDrawViewInfo *draw_view, void *customdata)
                                   winmat,
                                   settings->clip_start,
                                   settings->clip_end,
+                                  settings->cam_factor,
                                   true,
                                   false,
                                   true,
