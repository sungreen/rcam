diff --git a/intern/cycles/blender/addon/properties.py b/intern/cycles/blender/addon/properties.py
index ca42d5ce9bc..144ea50c4b4 100644
--- a/intern/cycles/blender/addon/properties.py
+++ b/intern/cycles/blender/addon/properties.py
@@ -1147,6 +1147,64 @@ class CyclesMaterialSettings(bpy.types.PropertyGroup):
         min=0.001, max=1000.0, soft_min=0.1, soft_max=10.0, precision=4
     )
 
+    orthodox_tilt_x: FloatProperty(
+        name="Orthodox Tilt X",
+        description="Orthodox Tilt X",
+        default=0.0,
+    )
+
+    orthodox_tilt_y: FloatProperty(
+        name="Orthodox Tilt Y",
+        description="Orthodox Tilt Y",
+        default=0.0,
+    )
+
+    orthodox_shift_x: FloatProperty(
+        name="Orthodox Shift X",
+        description="Orthodox Shift X",
+        default=0.0,
+    )
+
+    orthodox_shift_y: FloatProperty(
+        name="Orthodox Shift Y",
+        description="Orthodox Shift Y",
+        default=0.0,
+    )
+    orthodox_factor: FloatProperty(
+        name="Orthodox Factor",
+        description="Orthodox Factor",
+        default=0.0,
+    )
+
+    orthodox_tilt_x: FloatProperty(
+        name="Orthodox Tilt X",
+        description="Orthodox Tilt X",
+        default=0.0,
+    )
+
+    orthodox_tilt_y: FloatProperty(
+        name="Orthodox Tilt Y",
+        description="Orthodox Tilt Y",
+        default=0.0,
+    )
+
+    orthodox_shift_x: FloatProperty(
+        name="Orthodox Shift X",
+        description="Orthodox Shift X",
+        default=0.0,
+    )
+
+    orthodox_shift_y: FloatProperty(
+        name="Orthodox Shift Y",
+        description="Orthodox Shift Y",
+        default=0.0,
+    )
+    orthodox_factor: FloatProperty(
+        name="Orthodox Factor",
+        description="Orthodox Factor",
+        default=0.0,
+    )
+
     @classmethod
     def register(cls):
         bpy.types.Material.cycles = PointerProperty(
diff --git a/intern/cycles/blender/camera.cpp b/intern/cycles/blender/camera.cpp
index 25683ec4770..54b0506d339 100644
--- a/intern/cycles/blender/camera.cpp
+++ b/intern/cycles/blender/camera.cpp
@@ -76,6 +76,13 @@ class BlenderCamera {
   float central_cylindrical_range_v_min = -1.0f;
   float central_cylindrical_range_v_max = 1.0f;
   float central_cylindrical_radius = 1.0f;
+  
+  float orthodox_tilt_x = 0.0f;
+  float orthodox_tilt_y = 0.0f;
+  float orthodox_shift_x = 0.0f;
+  float orthodox_shift_y = 0.0f;
+  float orthodox_factor = 0.0f;
+  float orthodox_distance = 1.0f;
 
   enum { AUTO, HORIZONTAL, VERTICAL } sensor_fit = AUTO;
   float sensor_width = 36.0f;
@@ -204,6 +211,13 @@ static void blender_camera_from_object(BlenderCamera *bcam,
     bcam->central_cylindrical_range_v_max = b_camera.central_cylindrical_range_v_max();
     bcam->central_cylindrical_radius = b_camera.central_cylindrical_radius();
 
+    bcam->orthodox_tilt_x = b_camera.orthodox_tilt_x();
+    bcam->orthodox_tilt_y = b_camera.orthodox_tilt_y();
+    bcam->orthodox_shift_x = b_camera.orthodox_shift_x();
+    bcam->orthodox_shift_y = b_camera.orthodox_shift_y();
+    bcam->orthodox_factor = b_camera.orthodox_factor();
+    bcam->orthodox_distance = blender_camera_focal_distance(b_engine, b_ob, b_camera, bcam);
+
     bcam->interocular_distance = b_camera.stereo().interocular_distance();
     if (b_camera.stereo().convergence_mode() == BL::CameraStereoData::convergence_mode_PARALLEL) {
       bcam->convergence_distance = FLT_MAX;
@@ -484,6 +498,13 @@ static void blender_camera_sync(Camera *cam,
   cam->set_fisheye_polynomial_k3(bcam->fisheye_polynomial_k3);
   cam->set_fisheye_polynomial_k4(bcam->fisheye_polynomial_k4);
 
+  cam->set_orthodox_tilt_x(bcam->orthodox_tilt_x);
+  cam->set_orthodox_tilt_y(bcam->orthodox_tilt_y);
+  cam->set_orthodox_shift_x(bcam->orthodox_shift_x);
+  cam->set_orthodox_shift_y(bcam->orthodox_shift_y);
+  cam->set_orthodox_factor(bcam->orthodox_factor);
+  cam->set_orthodox_distance(bcam->orthodox_distance);
+
   cam->set_longitude_min(bcam->longitude_min);
   cam->set_longitude_max(bcam->longitude_max);
 
diff --git a/intern/cycles/kernel/camera/camera.h b/intern/cycles/kernel/camera/camera.h
index 01c8efcfb0e..c3d9ef07013 100644
--- a/intern/cycles/kernel/camera/camera.h
+++ b/intern/cycles/kernel/camera/camera.h
@@ -174,32 +174,67 @@ ccl_device void camera_sample_orthographic(KernelGlobals kg,
 {
   /* create ray form raster position */
   const ProjectionTransform rastertocamera = kernel_data.cam.rastertocamera;
-  const float3 Pcamera = transform_perspective(&rastertocamera, make_float3(raster_xy));
 
-  float3 P;
-  float3 D = make_float3(0.0f, 0.0f, 1.0f);
+  float3 Pcam = transform_perspective(&rastertocamera, make_float3(raster_xy.x, raster_xy.y, 0.0f));
+  /* orthodox cycles transform */
+  float orthodox_tilt_x = kernel_data.cam.orthodox_tilt_x;
+  float orthodox_tilt_y = kernel_data.cam.orthodox_tilt_y;
+  float orthodox_shift_x = kernel_data.cam.orthodox_shift_x;
+  float orthodox_shift_y = kernel_data.cam.orthodox_shift_y;
+  float orthodox_factor = kernel_data.cam.orthodox_factor;
+  float orthodox_distance = kernel_data.cam.orthodox_distance;
+  float nearClip = kernel_data.cam.nearclip;
+  float farClip = kernel_data.cam.cliplength + nearClip;
+  //  float width = kernel_data.cam.sensorwidth;
+
+  float Zf = -farClip;
+  float Zn = -nearClip;
+  float Zb = -orthodox_distance;
+  // float Xr = right - orthodox_shift_x;
+  // float Xl = left - orthodox_shift_x;
+  // float Yb = bottom - orthodox_shift_y;
+  // float Yt = top - orthodox_shift_y;
+  float Zq = 0.0f;
+  float Kf = 1.0f - orthodox_factor;
+  float tmax = farClip;
+  float tmin = nearClip;
+
+  if (orthodox_factor != 0.0f) {
+    Zq = Zb * (orthodox_factor - 1.0f) / orthodox_factor;
+    if (orthodox_factor > 0.0f) {
+      if (Zn > Zq - 0.001f)
+        Zn = Zq - 0.001f;
+      tmin = -Zn;
+    }
+    else {
+      if (Zf < Zq + 0.001f)
+        Zf = Zq + 0.001f;
+      tmax = -Zf - nearClip;
+    }
+  }
+
+  Pcam.z = 0.0f;
 
   /* modify ray for depth of field */
   const float aperturesize = kernel_data.cam.aperturesize;
+  
+  float3 aperture_offset = make_float3(0.0f, 0.0f, 0.0f);
+
 
   if (aperturesize > 0.0f) {
-    /* sample point on aperture */
-    const float2 lens_uv = camera_sample_aperture(&kernel_data.cam, rand_lens) * aperturesize;
+    float2 offset = camera_sample_aperture(&kernel_data.cam, rand_lens) * aperturesize;
+    aperture_offset = make_float3(offset.x, offset.y, 0.0f);
+  }
 
     /* compute point on plane of focus */
-    const float3 Pfocus = D * kernel_data.cam.focaldistance;
 
-    /* Update ray for effect of lens */
-    const float3 lens_uvw = make_float3(lens_uv);
+  float3 orthodox_offset = make_float3(0.0f, 0.0f, orthodox_distance);
+  float3 shift_tilt_offset = make_float3(-orthodox_shift_x, -orthodox_shift_y, orthodox_tilt_x * Pcam.x + orthodox_tilt_y * Pcam.y);
+  float3 V = Pcam + orthodox_offset + shift_tilt_offset;
+
+  float3 P = (Pcam + shift_tilt_offset) * Kf + aperture_offset;
+  float3 D = normalize(V - P);
 
-    D = normalize(Pfocus - lens_uvw);
-    /* Compute position the ray will be if it traveled until it intersected the near clip plane.
-     * This allows for correct DOF while allowing near clipping. */
-    P = Pcamera + lens_uvw + (D * (kernel_data.cam.nearclip / D.z));
-  }
-  else {
-    P = Pcamera + make_float3(0.0f, 0.0f, kernel_data.cam.nearclip);
-  }
   /* transform ray from camera to world */
   Transform cameratoworld = kernel_data.cam.cameratoworld;
 
@@ -224,8 +259,11 @@ ccl_device void camera_sample_orthographic(KernelGlobals kg,
 #endif
 
   /* clipping */
-  ray->tmin = 0.0f;
+  // ray->tmin = 0.0f;
   ray->tmax = kernel_data.cam.cliplength;
+  ray->tmin = kernel_data.cam.nearclip;
+  // ray->tmin = tmin;
+  // ray->tmax = tmax;
 }
 
 /* Panorama Camera */
diff --git a/intern/cycles/kernel/types.h b/intern/cycles/kernel/types.h
index e73dfdec091..d7969cdc56f 100644
--- a/intern/cycles/kernel/types.h
+++ b/intern/cycles/kernel/types.h
@@ -1291,6 +1291,14 @@ struct KernelCamera {
   float4 fisheye_lens_polynomial_coefficients;
   float4 central_cylindrical_range;
 
+  /* orthodox */
+  float orthodox_tilt_x;
+  float orthodox_tilt_y;
+  float orthodox_shift_x;
+  float orthodox_shift_y;
+  float orthodox_factor;
+  float orthodox_distance;
+
   /* stereo */
   float interocular_offset;
   float convergence_distance;
diff --git a/intern/cycles/scene/camera.cpp b/intern/cycles/scene/camera.cpp
index d0386273699..8811a87edb3 100644
--- a/intern/cycles/scene/camera.cpp
+++ b/intern/cycles/scene/camera.cpp
@@ -108,6 +108,13 @@ NODE_DEFINE(Camera)
   SOCKET_FLOAT(central_cylindrical_range_v_min, "Central Cylindrical Range V Min", -1.0f);
   SOCKET_FLOAT(central_cylindrical_range_v_max, "Central Cylindrical Range V Max", 1.0f);
 
+  SOCKET_FLOAT(orthodox_tilt_x, "Orthodox Tilt X", 0.0f);
+  SOCKET_FLOAT(orthodox_tilt_y, "Orthodox Tilt Y", 0.0f);
+  SOCKET_FLOAT(orthodox_shift_x, "Orthodox Shift X", 0.0f);
+  SOCKET_FLOAT(orthodox_shift_y, "Orthodox Shift Y", 0.0f);
+  SOCKET_FLOAT(orthodox_factor, "Orthodox Factor", 0.0f);
+  SOCKET_FLOAT(orthodox_distance, "Orthodox Distance", 1.0f);
+
   static NodeEnum stereo_eye_enum;
   stereo_eye_enum.insert("none", STEREO_NONE);
   stereo_eye_enum.insert("left", STEREO_LEFT);
@@ -418,6 +425,14 @@ void Camera::update(Scene *scene)
   kcam->panorama_type = panorama_type;
   kcam->fisheye_fov = fisheye_fov;
   kcam->fisheye_lens = fisheye_lens;
+
+  kcam->orthodox_tilt_x = orthodox_tilt_x;
+  kcam->orthodox_tilt_y = orthodox_tilt_y;
+  kcam->orthodox_shift_x = orthodox_shift_x;
+  kcam->orthodox_shift_y = orthodox_shift_y;
+  kcam->orthodox_factor = orthodox_factor;
+  kcam->orthodox_distance = orthodox_distance;
+
   kcam->equirectangular_range = make_float4(longitude_min - longitude_max,
                                             -longitude_min,
                                             latitude_min - latitude_max,
diff --git a/intern/cycles/scene/camera.h b/intern/cycles/scene/camera.h
index ff36fbbba10..db215130cec 100644
--- a/intern/cycles/scene/camera.h
+++ b/intern/cycles/scene/camera.h
@@ -91,6 +91,13 @@ class Camera : public Node {
   NODE_SOCKET_API(float, central_cylindrical_range_v_min)
   NODE_SOCKET_API(float, central_cylindrical_range_v_max)
 
+  NODE_SOCKET_API(float, orthodox_tilt_x)
+  NODE_SOCKET_API(float, orthodox_tilt_y)
+  NODE_SOCKET_API(float, orthodox_shift_x)
+  NODE_SOCKET_API(float, orthodox_shift_y)
+  NODE_SOCKET_API(float, orthodox_factor)
+  NODE_SOCKET_API(float, orthodox_distance)
+
   /* panorama stereo */
   NODE_SOCKET_API(StereoEye, stereo_eye)
   NODE_SOCKET_API(bool, use_spherical_stereo)
diff --git a/scripts/startup/bl_ui/properties_data_camera.py b/scripts/startup/bl_ui/properties_data_camera.py
index 8339051f212..ee9217b3d1e 100644
--- a/scripts/startup/bl_ui/properties_data_camera.py
+++ b/scripts/startup/bl_ui/properties_data_camera.py
@@ -96,6 +96,18 @@ class DATA_PT_lens(CameraButtonsPanel, Panel):
 
         elif cam.type == 'ORTHO':
             col.prop(cam, "ortho_scale")
+            engine = context.engine
+            if  engine in {'CYCLES', 'BLENDER_EEVEE', 'BLENDER_EEVEE_NEXT', 'BLENDER_WORKBENCH'}:
+                col.prop(cam, "orthodox_factor", text="Orthodox Factor")
+                col.prop(cam, "orthodox_tilt_x", text="Orthodox Tilt X")
+                col.prop(cam, "orthodox_tilt_y", text="Orthodox Tilt Y")
+                col.prop(cam, "orthodox_shift_x", text="Orthodox Shift X")
+                col.prop(cam, "orthodox_shift_y", text="Orthodox Shift Y")
+                dof = cam.dof
+                col.prop(dof, "focus_object", text="Focus Object")
+                sub = col.column()
+                sub.active = (dof.focus_object is None)
+                sub.prop(dof, "focus_distance", text="Distance")
 
         elif cam.type == 'PANO':
             engine = context.engine
diff --git a/source/blender/blenkernel/BKE_camera.h b/source/blender/blenkernel/BKE_camera.h
index 9c6cfd3a16d..61be659d3d6 100644
--- a/source/blender/blenkernel/BKE_camera.h
+++ b/source/blender/blenkernel/BKE_camera.h
@@ -70,6 +70,14 @@ typedef struct CameraParams {
   float viewdy;
   rctf viewplane;
 
+  /* set orthodox */
+  float orthodox_tilt_x;
+  float orthodox_tilt_y;
+  float orthodox_shift_x;
+  float orthodox_shift_y;
+  float orthodox_factor;
+  float orthodox_distance;
+
   /* computed matrix */
   float winmat[4][4];
 } CameraParams;
diff --git a/source/blender/blenkernel/intern/camera.cc b/source/blender/blenkernel/intern/camera.cc
index 554f4eba30c..f04ffb94d72 100644
--- a/source/blender/blenkernel/intern/camera.cc
+++ b/source/blender/blenkernel/intern/camera.cc
@@ -166,7 +166,11 @@ static CameraCyclesCompatibilityData camera_write_cycles_compatibility_data_crea
   cycles_property_float_set(cycles_cam, "fisheye_polynomial_k2", cam->fisheye_polynomial_k2);
   cycles_property_float_set(cycles_cam, "fisheye_polynomial_k3", cam->fisheye_polynomial_k3);
   cycles_property_float_set(cycles_cam, "fisheye_polynomial_k4", cam->fisheye_polynomial_k4);
-
+  cycles_property_float_set(cycles_cam, "orthodox_tilt_x", cam->orthodox_tilt_x);
+  cycles_property_float_set(cycles_cam, "orthodox_tilt_y", cam->orthodox_tilt_y);
+  cycles_property_float_set(cycles_cam, "orthodox_shift_x", cam->orthodox_shift_x);
+  cycles_property_float_set(cycles_cam, "orthodox_shift_y", cam->orthodox_shift_y);
+  cycles_property_float_set(cycles_cam, "orthodox_factor", cam->orthodox_factor);
   id->properties = idprop_temp;
 
   return {idprop_prev, idprop_temp};
@@ -337,6 +341,9 @@ void BKE_camera_params_init(CameraParams *params)
   /* fallback for non camera objects */
   params->clip_start = 0.1f;
   params->clip_end = 100.0f;
+
+  params->orthodox_distance = 1.0f;
+  params->orthodox_factor = 0.0f;
 }
 
 void BKE_camera_params_from_object(CameraParams *params, const Object *cam_ob)
@@ -364,6 +371,13 @@ void BKE_camera_params_from_object(CameraParams *params, const Object *cam_ob)
 
     params->clip_start = cam->clip_start;
     params->clip_end = cam->clip_end;
+
+    params->orthodox_tilt_x = cam->orthodox_tilt_x;
+    params->orthodox_tilt_y = cam->orthodox_tilt_y;
+    params->orthodox_shift_x = cam->orthodox_shift_x;
+    params->orthodox_shift_y = cam->orthodox_shift_y;
+    params->orthodox_factor = cam->orthodox_factor;
+    params->orthodox_distance = BKE_camera_object_dof_distance(cam_ob);
   }
   else if (cam_ob->type == OB_LAMP) {
     /* light object */
@@ -502,13 +516,20 @@ void BKE_camera_params_compute_matrix(CameraParams *params)
 
   /* compute projection matrix */
   if (params->is_ortho) {
-    orthographic_m4(params->winmat,
-                    viewplane.xmin,
-                    viewplane.xmax,
-                    viewplane.ymin,
-                    viewplane.ymax,
-                    params->clip_start,
-                    params->clip_end);
+    orthodox_m4(params->winmat,
+                viewplane.xmin,
+                viewplane.xmax,
+                viewplane.ymin,
+                viewplane.ymax,
+                params->clip_start,
+                params->clip_end,
+                params->orthodox_distance,
+                params->orthodox_factor,
+                params->orthodox_shift_x,
+                params->orthodox_shift_y,
+                params->orthodox_tilt_x,
+                params->orthodox_tilt_y
+                );
   }
   else {
     perspective_m4(params->winmat,
diff --git a/source/blender/blenlib/BLI_math_geom.h b/source/blender/blenlib/BLI_math_geom.h
index 04e94a653bf..d28e5ba16db 100644
--- a/source/blender/blenlib/BLI_math_geom.h
+++ b/source/blender/blenlib/BLI_math_geom.h
@@ -1120,6 +1120,23 @@ void orthographic_m4(float mat[4][4],
                      float top,
                      float nearClip,
                      float farClip);
+/**
+ * Matches `custom matrix` result.
+ */
+void orthodox_m4(float mat[4][4],
+                     float left,
+                     float right,
+                     float bottom,
+                     float top,
+                     float nearClip,
+                     float farClip,
+                     float orthodox_distance,
+                     float orthodox_factor,
+                     float orthodox_shift_x,
+                     float orthodox_shift_y,
+                     float orthodox_tilt_x,
+                     float orthodox_tilt_y);
+
 /**
  * Translate a matrix created by orthographic_m4 or perspective_m4 in XY coords
  * (used to jitter the view).
diff --git a/source/blender/blenlib/intern/math_geom.cc b/source/blender/blenlib/intern/math_geom.cc
index 6d900836946..66de4be9268 100644
--- a/source/blender/blenlib/intern/math_geom.cc
+++ b/source/blender/blenlib/intern/math_geom.cc
@@ -4599,6 +4599,106 @@ void perspective_m4_fov(float mat[4][4],
   mat[1][1] /= nearClip;
 }
 
+void orthodox_m4(float matrix[4][4],
+                 const float left,
+                 const float right,
+                 const float bottom,
+                 const float top,
+                 const float nearClip,
+                 const float farClip,
+                 const float orthodox_distance,
+                 const float orthodox_factor,
+                 const float orthodox_shift_x,
+                 const float orthodox_shift_y,
+                 const float orthodox_tilt_x,
+                 const float orthodox_tilt_y)
+{
+  {
+    // orthodox eevee transform
+
+    float Zf = -farClip;
+    float Zn = -nearClip;
+    float Zd = -orthodox_distance;
+
+    float sx = -orthodox_shift_x;
+    float sy = -orthodox_shift_y;
+
+    float Xr = right + sx;
+    float Xl = left + sx;
+    float Yb = bottom + sy;
+    float Yt = top + sy;
+
+    float Kf = 1.0f - orthodox_factor;
+    float C3 = (1.0f - Kf) / Zd;
+    float D3 = Kf;
+
+    float Zq = 0.0f;
+    if (C3!=0.0f) {
+      Zq = (0.01f - D3)/C3;
+      Zn = (C3<0.0f && Zn>Zq) ? Zq : Zn;
+      Zf = (C3>0.0f && Zf<Zq) ? Zq : Zf;
+    }
+
+    float C2 = (C3 * (Zf + Zn) + 2.0f * D3) / (Zf - Zn);
+    float D2 = (C3 * Zf + D3) - C2 * Zf;
+
+    float A0 = 2.0f / (Xr - Xl);
+    float C0 = - (Xr + Xl) / (Xr - Xl) * C3;
+    float D0 = - (Xr + Xl) / (Xr - Xl) * D3;
+    float B1 = 2.0f / (Yt - Yb);
+    float C1 = - (Yt + Yb) / (Yt - Yb) * C3;
+    float D1 = - (Yt + Yb) / (Yt - Yb) * D3;
+
+    matrix[0][0] = A0;
+    matrix[1][0] = 0.0f;
+    matrix[2][0] = C0;
+    matrix[3][0] = D0;
+
+    matrix[0][1] = 0.0f;
+    matrix[1][1] = B1;
+    matrix[2][1] = C1;
+    matrix[3][1] = D1;
+
+    matrix[0][2] = 0.0f;
+    matrix[1][2] = 0.0f;
+    matrix[2][2] = C2;
+    matrix[3][2] = D2;
+
+    matrix[0][3] = 0.0f;
+    matrix[1][3] = 0.0f;
+    matrix[2][3] = C3;
+    matrix[3][3] = D3;
+
+    #if 0
+    printf("Orthodox matrix ________________\n");
+    printf("Factor %7.3f  Kf  %7.3f  Zq %7.3f\n", orthodox_factor, Kf, Zq);
+    printf("Xr %7.3f  Xl  %7.3f Sx  %7.3f\n", Xr, Xl, Xr + Xl);
+    printf("Yt %7.3f  Yb  %7.3f Sy  %7.3f\n", Yt, Yb, Yt + Yb);
+    printf("Zn %7.3f  Zn %7.3f  Zf %7.3f\n", Zn, Zd, Zf);
+    printf("Wn %7.3f  Wb %7.3f  Wf %7.3f\n", Zn * C3 + D3, Zd * C3 + D3, Zf * C3 + D3);
+    printf("Pn %7.3f  Pb %7.3f  Pf %7.3f\n",
+           (Zn * C2 + D2) / (Zn * C3 + D3),
+           (Zd * C2 + D2) / (Zd * C3 + D3),
+           (Zf * C2 + D2) / (Zf * C3 + D3));
+    printf("0: %7.3f %7.3f %7.3f %7.3f\n", matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0]);
+    printf("1: %7.3f %7.3f %7.3f %7.3f\n", matrix[0][1], matrix[1][1], matrix[2][1], matrix[3][1]);
+    printf("2: %7.3f %7.3f %7.3f %7.3f\n", matrix[0][2], matrix[1][2], matrix[2][2], matrix[3][2]);
+    printf("3: %7.3f %7.3f %7.3f %7.3f\n", matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]);
+
+    float n0 = -matrix[3][2] / (matrix[2][2] - 1.0f);
+    float n1 =  -(matrix[3][2] + 1.0f) / matrix[2][2];
+    float n2 =  (-matrix[3][3] - matrix[3][2]) / (matrix[2][2] - matrix[2][3]);
+    float n3 =  (-matrix[3][3] - matrix[3][2]) / (matrix[2][2] + matrix[2][3]);
+    float f0 = -matrix[3][2] / (matrix[2][2] + 1.0f);
+    float f1 = -(matrix[3][2] - 1.0f) / matrix[2][2];
+    float f2 =  (-matrix[3][3] - matrix[3][2]) / (matrix[2][2] - matrix[2][3]);
+    float f3 =  ( matrix[3][3] - matrix[3][2]) / (matrix[2][2] - matrix[2][3]);
+    printf("n: %7.3f %7.3f %7.3f %7.3f\n", n0, n1, n2, n3);
+    printf("f: %7.3f %7.3f %7.3f %7.3f\n", f0, f1, f1, f3);
+    #endif
+  }
+}
+
 void window_translate_m4(float winmat[4][4], float perspmat[4][4], const float x, const float y)
 {
   if (winmat[2][3] == -1.0f) {
diff --git a/source/blender/editors/grease_pencil/intern/grease_pencil_image_render.cc b/source/blender/editors/grease_pencil/intern/grease_pencil_image_render.cc
index 9ff97f03643..b14f8abcec6 100644
--- a/source/blender/editors/grease_pencil/intern/grease_pencil_image_render.cc
+++ b/source/blender/editors/grease_pencil/intern/grease_pencil_image_render.cc
@@ -147,7 +147,14 @@ void compute_view_matrices(const ViewContext &view_context,
                                                 &viewplane,
                                                 &clip_start,
                                                 &clip_end,
-                                                nullptr);
+                                                nullptr,
+                                                nullptr,
+                                                nullptr,
+                                                nullptr,
+                                                nullptr,
+                                                nullptr,
+                                                nullptr
+                                                );
 
   /* Rescale `viewplane` to fit all strokes. */
   const float2 view_min = float2(viewplane.xmin, viewplane.ymin);
diff --git a/source/blender/editors/include/ED_view3d.hh b/source/blender/editors/include/ED_view3d.hh
index 02323d2ac4f..44323a7db03 100644
--- a/source/blender/editors/include/ED_view3d.hh
+++ b/source/blender/editors/include/ED_view3d.hh
@@ -784,7 +784,13 @@ bool ED_view3d_viewplane_get(const Depsgraph *depsgraph,
                              rctf *r_viewplane,
                              float *r_clip_start,
                              float *r_clip_end,
-                             float *r_pixsize);
+                             float *r_pixsize,
+                             float *orthodox_distance,
+                             float *orthodox_factor,
+                             float *orthodox_shift_x,
+                             float *orthodox_shift_y,
+                             float *orthodox_tilt_x,
+                             float *orthodox_tilt_y);
 
 /**
  * Use instead of: `GPU_polygon_offset(rv3d->dist, ...)` see bug #37727.
diff --git a/source/blender/editors/space_view3d/view3d_draw.cc b/source/blender/editors/space_view3d/view3d_draw.cc
index d3aaf9ac9d7..26f1f412ce2 100644
--- a/source/blender/editors/space_view3d/view3d_draw.cc
+++ b/source/blender/editors/space_view3d/view3d_draw.cc
@@ -1965,9 +1965,10 @@ ImBuf *ED_view3d_draw_offscreen_imbuf(Depsgraph *depsgraph,
   else {
     rctf viewplane;
     float clip_start, clipend;
+    float orthodox_distance, orthodox_factor, orthodox_shift_x, orthodox_shift_y, orthodox_tilt_x, orthodox_tilt_y;
 
     is_ortho = ED_view3d_viewplane_get(
-        depsgraph, v3d, rv3d, sizex, sizey, &viewplane, &clip_start, &clipend, nullptr);
+        depsgraph, v3d, rv3d, sizex, sizey, &viewplane, &clip_start, &clipend, nullptr, &orthodox_distance, &orthodox_factor, &orthodox_shift_x, &orthodox_shift_y, &orthodox_tilt_x, &orthodox_tilt_y);
     if (is_ortho) {
       orthographic_m4(winmat,
                       viewplane.xmin,
diff --git a/source/blender/editors/space_view3d/view3d_utils.cc b/source/blender/editors/space_view3d/view3d_utils.cc
index a60d6f2ded7..afbada3c7af 100644
--- a/source/blender/editors/space_view3d/view3d_utils.cc
+++ b/source/blender/editors/space_view3d/view3d_utils.cc
@@ -187,7 +187,13 @@ bool ED_view3d_viewplane_get(const Depsgraph *depsgraph,
                              rctf *r_viewplane,
                              float *r_clip_start,
                              float *r_clip_end,
-                             float *r_pixsize)
+                             float *r_pixsize,
+                             float *orthodox_distance,
+                             float *orthodox_factor,
+                             float *orthodox_shift_x,
+                             float *orthodox_shift_y,
+                             float *orthodox_tilt_x,
+                             float *orthodox_tilt_y)
 {
   CameraParams params;
 
@@ -208,6 +214,30 @@ bool ED_view3d_viewplane_get(const Depsgraph *depsgraph,
     *r_pixsize = params.viewdx;
   }
 
+  if (orthodox_distance) {
+    *orthodox_distance = params.orthodox_distance;
+  }
+
+  if (orthodox_factor) {
+    *orthodox_factor = params.orthodox_factor;
+  }
+
+  if (orthodox_shift_x) {
+    *orthodox_shift_x = params.orthodox_shift_x;
+  }
+
+  if (orthodox_shift_y) {
+    *orthodox_shift_y = params.orthodox_shift_y;
+  }
+
+  if (orthodox_tilt_x) {
+    *orthodox_tilt_x = params.orthodox_tilt_x;
+  }
+
+  if (orthodox_shift_y) {
+    *orthodox_tilt_y = params.orthodox_tilt_y;
+  }
+
   return params.is_ortho;
 }
 
diff --git a/source/blender/editors/space_view3d/view3d_view.cc b/source/blender/editors/space_view3d/view3d_view.cc
index d356b226579..712a630bc6e 100644
--- a/source/blender/editors/space_view3d/view3d_view.cc
+++ b/source/blender/editors/space_view3d/view3d_view.cc
@@ -312,6 +312,7 @@ void view3d_winmatrix_set(const Depsgraph *depsgraph,
   rctf full_viewplane;
   float clipsta, clipend;
   bool is_ortho;
+  float orthodox_distance, orthodox_factor, orthodox_shift_x, orthodox_shift_y, orthodox_tilt_x, orthodox_tilt_y;
 
   is_ortho = ED_view3d_viewplane_get(depsgraph,
                                      v3d,
@@ -321,7 +322,14 @@ void view3d_winmatrix_set(const Depsgraph *depsgraph,
                                      &full_viewplane,
                                      &clipsta,
                                      &clipend,
-                                     nullptr);
+                                     nullptr,
+                                     &orthodox_distance,
+                                     &orthodox_factor,
+                                     &orthodox_shift_x,
+                                     &orthodox_shift_y,
+                                     &orthodox_tilt_x,
+                                     &orthodox_tilt_y);
+
   rv3d->is_persp = !is_ortho;
 
 #if 0
@@ -355,8 +363,8 @@ void view3d_winmatrix_set(const Depsgraph *depsgraph,
   }
 
   if (is_ortho) {
-    GPU_matrix_ortho_set(
-        viewplane.xmin, viewplane.xmax, viewplane.ymin, viewplane.ymax, clipsta, clipend);
+    GPU_matrix_orthodox_set(
+        viewplane.xmin, viewplane.xmax, viewplane.ymin, viewplane.ymax, clipsta, clipend, orthodox_distance, orthodox_factor, orthodox_shift_x, orthodox_shift_y, orthodox_tilt_x, orthodox_tilt_y);
   }
   else {
     GPU_matrix_frustum_set(
diff --git a/source/blender/gpu/GPU_matrix.hh b/source/blender/gpu/GPU_matrix.hh
index 2c23de61033..9a70bd90871 100644
--- a/source/blender/gpu/GPU_matrix.hh
+++ b/source/blender/gpu/GPU_matrix.hh
@@ -89,6 +89,7 @@ void GPU_matrix_identity_projection_set();
 void GPU_matrix_projection_set(const float m[4][4]);
 
 void GPU_matrix_ortho_set(float left, float right, float bottom, float top, float near, float far);
+void GPU_matrix_orthodox_set(float left, float right, float bottom, float top, float near, float far, float orthodox_distance, float orthodox_factor, float orthodox_shift_x, float orthodox_shift_y, float orthodox_tilt_x, float orthodox_tilt_y);
 void GPU_matrix_ortho_set_z(float near, float far);
 
 void GPU_matrix_frustum_set(
diff --git a/source/blender/gpu/intern/gpu_matrix.cc b/source/blender/gpu/intern/gpu_matrix.cc
index 4c2326b3a6b..bb7decafe99 100644
--- a/source/blender/gpu/intern/gpu_matrix.cc
+++ b/source/blender/gpu/intern/gpu_matrix.cc
@@ -404,6 +404,13 @@ void GPU_matrix_ortho_set(float left, float right, float bottom, float top, floa
   gpu_matrix_state_active_set_dirty(true);
 }
 
+void GPU_matrix_orthodox_set(float left, float right, float bottom, float top, float near, float far, float orthodox_distance, float orthodox_factor, float orthodox_shift_x, float orthodox_shift_y, float orthodox_tilt_x, float orthodox_tilt_y)
+{
+  orthodox_m4(Projection, left, right, bottom, top, near, far, orthodox_distance, orthodox_factor, orthodox_shift_x, orthodox_shift_y, orthodox_tilt_x, orthodox_tilt_y);
+  CHECKMAT(Projection);
+  gpu_matrix_state_active_set_dirty(true);
+}
+
 void GPU_matrix_ortho_set_z(float near, float far)
 {
   CHECKMAT(Projection);
diff --git a/source/blender/makesdna/DNA_camera_types.h b/source/blender/makesdna/DNA_camera_types.h
index 0f04311f08f..f26bee5dae5 100644
--- a/source/blender/makesdna/DNA_camera_types.h
+++ b/source/blender/makesdna/DNA_camera_types.h
@@ -110,6 +110,15 @@ typedef struct Camera {
   float central_cylindrical_radius;
   float _pad2;
 
+  /* Orthodox properties. */
+  float orthodox_tilt_x;
+  float orthodox_tilt_y;
+  float orthodox_shift_x;
+  float orthodox_shift_y;
+  float orthodox_factor;
+  float orthodox_distance;
+  char orthodox_pad[8];
+
   /** Old animation system, deprecated for 2.5. */
   struct Ipo *ipo DNA_DEPRECATED;
 
diff --git a/source/blender/makesrna/intern/rna_camera.cc b/source/blender/makesrna/intern/rna_camera.cc
index 3a2ee8bf955..d18a6c4ad8d 100644
--- a/source/blender/makesrna/intern/rna_camera.cc
+++ b/source/blender/makesrna/intern/rna_camera.cc
@@ -965,6 +965,34 @@ void RNA_def_camera(BlenderRNA *brna)
   RNA_def_property_ui_text(prop, "Cylinder Radius", "Radius of the virtual cylinder");
   RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
 
+  /* orthodox */
+
+  prop = RNA_def_property(srna, "orthodox_shift_x", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_shift_x");
+  RNA_def_property_ui_text(prop, "Orthodox shift x", "Orthodox horizontal shift");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_shift_y", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_shift_y");
+  RNA_def_property_ui_text(prop, "Orthodox shift y", "Orthodox vertical shift");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_tilt_x", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_tilt_x");
+  RNA_def_property_ui_text(prop, "Orthodox tilt x", "Orthodox horizontal tilt");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_tilt_y", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_tilt_y");
+  RNA_def_property_ui_text(prop, "Orthodox tilt y", "Orthodox vertical tilt");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_factor", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_factor");
+  RNA_def_property_ui_range(prop, -80, 80, 1, 3);
+  RNA_def_property_ui_text(prop, "Orthodox factor", "Orthodox factor");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
   /* pointers */
   prop = RNA_def_property(srna, "dof", PROP_POINTER, PROP_NONE);
   RNA_def_property_struct_type(prop, "CameraDOFSettings");
