diff --git a/intern/cycles/blender/addon/properties.py b/intern/cycles/blender/addon/properties.py
index 573108e4fca..f7d93a9f4d3 100644
--- a/intern/cycles/blender/addon/properties.py
+++ b/intern/cycles/blender/addon/properties.py
@@ -1059,6 +1059,64 @@ class CyclesMaterialSettings(bpy.types.PropertyGroup):
         default='BUMP',
     )
 
+    orthodox_tilt_x: FloatProperty(
+        name="Orthodox Tilt X",
+        description="Orthodox Tilt X",
+        default=0.0,
+    )
+
+    orthodox_tilt_y: FloatProperty(
+        name="Orthodox Tilt Y",
+        description="Orthodox Tilt Y",
+        default=0.0,
+    )
+
+    orthodox_shift_x: FloatProperty(
+        name="Orthodox Shift X",
+        description="Orthodox Shift X",
+        default=0.0,
+    )
+
+    orthodox_shift_y: FloatProperty(
+        name="Orthodox Shift Y",
+        description="Orthodox Shift Y",
+        default=0.0,
+    )
+    orthodox_factor: FloatProperty(
+        name="Orthodox Factor",
+        description="Orthodox Factor",
+        default=0.0,
+    )
+
+    orthodox_tilt_x: FloatProperty(
+        name="Orthodox Tilt X",
+        description="Orthodox Tilt X",
+        default=0.0,
+    )
+
+    orthodox_tilt_y: FloatProperty(
+        name="Orthodox Tilt Y",
+        description="Orthodox Tilt Y",
+        default=0.0,
+    )
+
+    orthodox_shift_x: FloatProperty(
+        name="Orthodox Shift X",
+        description="Orthodox Shift X",
+        default=0.0,
+    )
+
+    orthodox_shift_y: FloatProperty(
+        name="Orthodox Shift Y",
+        description="Orthodox Shift Y",
+        default=0.0,
+    )
+    orthodox_factor: FloatProperty(
+        name="Orthodox Factor",
+        description="Orthodox Factor",
+        default=0.0,
+    )
+
     @classmethod
     def register(cls):
         bpy.types.Material.cycles = PointerProperty(
diff --git a/intern/cycles/blender/camera.cpp b/intern/cycles/blender/camera.cpp
index b743d7815ae..8b7d2f2fe1e 100644
--- a/intern/cycles/blender/camera.cpp
+++ b/intern/cycles/blender/camera.cpp
@@ -35,6 +35,7 @@ struct BlenderCamera {
   uint apertureblades;
   float aperturerotation;
   float focaldistance;
+  float orthodoxdistance;
 
   float2 shift;
   float2 offset;
@@ -64,6 +65,12 @@ struct BlenderCamera {
   float fisheye_polynomial_k3;
   float fisheye_polynomial_k4;
 
+  float orthodox_tilt_x;
+  float orthodox_tilt_y;
+  float orthodox_shift_x;
+  float orthodox_shift_y;
+  float orthodox_factor;
+
   enum { AUTO, HORIZONTAL, VERTICAL } sensor_fit;
   float sensor_width;
   float sensor_height;
@@ -133,6 +140,13 @@ static void blender_camera_init(BlenderCamera *bcam, BL::RenderSettings &b_rende
   bcam->render_height = render_resolution_y(b_render);
   bcam->full_width = bcam->render_width;
   bcam->full_height = bcam->render_height;
+
+  bcam->orthodoxdistance = 1.0f;
+  bcam->orthodox_factor = 0.0f;
+  bcam->orthodox_tilt_x = 0.0f;
+  bcam->orthodox_tilt_y = 0.0f;
+  bcam->orthodox_shift_x = 0.0f;
+  bcam->orthodox_shift_y = 0.0f;
 }
 
 static float blender_camera_focal_distance(BL::RenderEngine &b_engine,
@@ -230,6 +244,13 @@ static void blender_camera_from_object(BlenderCamera *bcam,
     bcam->fisheye_polynomial_k3 = b_camera.fisheye_polynomial_k3();
     bcam->fisheye_polynomial_k4 = b_camera.fisheye_polynomial_k4();
 
+    bcam->orthodox_tilt_x = b_camera.orthodox_tilt_x();
+    bcam->orthodox_tilt_y = b_camera.orthodox_tilt_y();
+    bcam->orthodox_shift_x = b_camera.orthodox_shift_x();
+    bcam->orthodox_shift_y = b_camera.orthodox_shift_y();
+    bcam->orthodox_factor = b_camera.orthodox_factor();
+    bcam->orthodoxdistance = blender_camera_focal_distance(b_engine, b_ob, b_camera, bcam);
+
     bcam->interocular_distance = b_camera.stereo().interocular_distance();
     if (b_camera.stereo().convergence_mode() == BL::CameraStereoData::convergence_mode_PARALLEL) {
       bcam->convergence_distance = FLT_MAX;
@@ -508,6 +529,13 @@ static void blender_camera_sync(Camera *cam,
   cam->set_fisheye_polynomial_k3(bcam->fisheye_polynomial_k3);
   cam->set_fisheye_polynomial_k4(bcam->fisheye_polynomial_k4);
 
+  cam->set_orthodox_tilt_x(bcam->orthodox_tilt_x);
+  cam->set_orthodox_tilt_y(bcam->orthodox_tilt_y);
+  cam->set_orthodox_shift_x(bcam->orthodox_shift_x);
+  cam->set_orthodox_shift_y(bcam->orthodox_shift_y);
+  cam->set_orthodox_factor(bcam->orthodox_factor);
+  cam->set_orthodoxdistance(bcam->orthodoxdistance);
+
   cam->set_longitude_min(bcam->longitude_min);
   cam->set_longitude_max(bcam->longitude_max);
 
diff --git a/intern/cycles/kernel/camera/camera.h b/intern/cycles/kernel/camera/camera.h
index ba3db4aeac0..c3d5255df5e 100644
--- a/intern/cycles/kernel/camera/camera.h
+++ b/intern/cycles/kernel/camera/camera.h
@@ -171,29 +171,32 @@ ccl_device void camera_sample_orthographic(KernelGlobals kg,
 {
   /* create ray form raster position */
   ProjectionTransform rastertocamera = kernel_data.cam.rastertocamera;
-  float3 Pcamera = transform_perspective(&rastertocamera, float2_to_float3(raster_xy));
+  float3 Pcam = transform_perspective(&rastertocamera, float2_to_float3(raster_xy));
 
-  float3 P;
-  float3 D = make_float3(0.0f, 0.0f, 1.0f);
+  /* orthodox transform */
+  float orthodox_tilt_x = kernel_data.cam.orthodox_tilt_x;
+  float orthodox_tilt_y = kernel_data.cam.orthodox_tilt_y;
+  float orthodox_shift_x = kernel_data.cam.orthodox_shift_x;
+  float orthodox_shift_y = kernel_data.cam.orthodox_shift_y;
+  float orthodox_factor = kernel_data.cam.orthodox_factor;
+  float orthodoxdistance = kernel_data.cam.orthodoxdistance;
+
+  float3 orthodox_offset = make_float3(0.0f, 0.0f, orthodoxdistance);
 
   /* modify ray for depth of field */
   float aperturesize = kernel_data.cam.aperturesize;
+  float3 aperture_offset = make_float3(0.0f, 0.0f, 0.0f);
 
   if (aperturesize > 0.0f) {
     /* sample point on aperture */
-    float2 lens_uv = camera_sample_aperture(&kernel_data.cam, rand_lens) * aperturesize;
-
-    /* compute point on plane of focus */
-    float3 Pfocus = D * kernel_data.cam.focaldistance;
-
-    /* update ray for effect of lens */
-    float3 lens_uvw = float2_to_float3(lens_uv);
-    P = Pcamera + lens_uvw;
-    D = normalize(Pfocus - lens_uvw);
-  }
-  else {
-    P = Pcamera;
+    float2 offset = camera_sample_aperture(&kernel_data.cam, rand_lens) * aperturesize;
+    aperture_offset = make_float3(offset.x, offset.y, 0.0f);
   }
+  float3 tilt_offset = make_float3(orthodox_shift_x, orthodox_shift_y, orthodox_tilt_x * Pcam.x + orthodox_tilt_y * Pcam.y);
+  float3 V = Pcam + orthodox_offset + tilt_offset;
+  float3 P = (Pcam + tilt_offset)*(1.0f - orthodox_factor) + aperture_offset;
+  float3 D = normalize(V - P);
+  
   /* transform ray from camera to world */
   Transform cameratoworld = kernel_data.cam.cameratoworld;
 
@@ -222,6 +225,8 @@ ccl_device void camera_sample_orthographic(KernelGlobals kg,
   ray->tmax = kernel_data.cam.cliplength;
 }
 
+
+
 /* Panorama Camera */
 
 ccl_device_inline void camera_sample_panorama(ccl_constant KernelCamera *cam,
diff --git a/intern/cycles/kernel/types.h b/intern/cycles/kernel/types.h
index 50713f31357..f0e9e2e5e35 100644
--- a/intern/cycles/kernel/types.h
+++ b/intern/cycles/kernel/types.h
@@ -1073,6 +1073,7 @@ typedef struct KernelCamera {
   float blades;
   float bladesrotation;
   float focaldistance;
+  float orthodoxdistance;
 
   /* motion blur */
   float shuttertime;
@@ -1089,6 +1090,11 @@ typedef struct KernelCamera {
   float fisheye_lens_polynomial_bias;
   float4 equirectangular_range;
   float4 fisheye_lens_polynomial_coefficients;
+  float orthodox_tilt_x;
+  float orthodox_tilt_y;
+  float orthodox_shift_x;
+  float orthodox_shift_y;
+  float orthodox_factor;
 
   /* stereo */
   float interocular_offset;
diff --git a/intern/cycles/scene/camera.cpp b/intern/cycles/scene/camera.cpp
index e53eafb8fff..610e8c554f9 100644
--- a/intern/cycles/scene/camera.cpp
+++ b/intern/cycles/scene/camera.cpp
@@ -108,6 +108,13 @@ NODE_DEFINE(Camera)
   SOCKET_FLOAT(fisheye_polynomial_k3, "Fisheye Polynomial K3", 0.0f);
   SOCKET_FLOAT(fisheye_polynomial_k4, "Fisheye Polynomial K4", 0.0f);
 
+  SOCKET_FLOAT(orthodox_tilt_x, "Orthodox Tilt X", 0.0f);
+  SOCKET_FLOAT(orthodox_tilt_y, "Orthodox Tilt Y", 0.0f);
+  SOCKET_FLOAT(orthodox_shift_x, "Orthodox Shift X", 0.0f);
+  SOCKET_FLOAT(orthodox_shift_y, "Orthodox Shift Y", 0.0f);
+  SOCKET_FLOAT(orthodox_factor, "Orthodox Factor", 0.0f);
+  SOCKET_FLOAT(orthodoxdistance, "Orthodox Distance", 1.0f);
+
   static NodeEnum stereo_eye_enum;
   stereo_eye_enum.insert("none", STEREO_NONE);
   stereo_eye_enum.insert("left", STEREO_LEFT);
@@ -413,6 +420,14 @@ void Camera::update(Scene *scene)
   kcam->panorama_type = panorama_type;
   kcam->fisheye_fov = fisheye_fov;
   kcam->fisheye_lens = fisheye_lens;
+
+  kcam->orthodox_tilt_x = orthodox_tilt_x;
+  kcam->orthodox_tilt_y = orthodox_tilt_y;
+  kcam->orthodox_shift_x = orthodox_shift_x;
+  kcam->orthodox_shift_y = orthodox_shift_y;
+  kcam->orthodox_factor = orthodox_factor;
+  kcam->orthodoxdistance = orthodoxdistance;
+
   kcam->equirectangular_range = make_float4(longitude_min - longitude_max,
                                             -longitude_min,
                                             latitude_min - latitude_max,
diff --git a/intern/cycles/scene/camera.h b/intern/cycles/scene/camera.h
index 81838da33f0..a38ea22e68c 100644
--- a/intern/cycles/scene/camera.h
+++ b/intern/cycles/scene/camera.h
@@ -87,6 +87,13 @@ class Camera : public Node {
   NODE_SOCKET_API(float, fisheye_polynomial_k3)
   NODE_SOCKET_API(float, fisheye_polynomial_k4)
 
+  NODE_SOCKET_API(float, orthodox_tilt_x)
+  NODE_SOCKET_API(float, orthodox_tilt_y)
+  NODE_SOCKET_API(float, orthodox_shift_x)
+  NODE_SOCKET_API(float, orthodox_shift_y)
+  NODE_SOCKET_API(float, orthodox_factor)
+  NODE_SOCKET_API(float, orthodoxdistance)
+
   /* panorama stereo */
   NODE_SOCKET_API(StereoEye, stereo_eye)
   NODE_SOCKET_API(bool, use_spherical_stereo)
diff --git a/scripts/startup/bl_ui/properties_data_camera.py b/scripts/startup/bl_ui/properties_data_camera.py
index 0747aac1094..b060494eb23 100644
--- a/scripts/startup/bl_ui/properties_data_camera.py
+++ b/scripts/startup/bl_ui/properties_data_camera.py
@@ -99,6 +99,18 @@ class DATA_PT_lens(CameraButtonsPanel, Panel):
 
         elif cam.type == 'ORTHO':
             col.prop(cam, "ortho_scale")
+            engine = context.engine
+            if engine == 'CYCLES':
+                col.prop(cam, "orthodox_factor", text="Orthodox Factor")
+                col.prop(cam, "orthodox_tilt_x", text="Orthodox Tilt X")
+                col.prop(cam, "orthodox_tilt_y", text="Orthodox Tilt Y")
+                col.prop(cam, "orthodox_shift_x", text="Orthodox Shift X")
+                col.prop(cam, "orthodox_shift_y", text="Orthodox Shift Y")
+                dof = cam.dof
+                col.prop(dof, "focus_object", text="Focus Object")
+                sub = col.column()
+                sub.active = (dof.focus_object is None)
+                sub.prop(dof, "focus_distance", text="Distance")
 
         elif cam.type == 'PANO':
             engine = context.engine
diff --git a/source/blender/blenkernel/intern/camera.cc b/source/blender/blenkernel/intern/camera.cc
index fb0e4af7a5c..02203faeb3b 100644
--- a/source/blender/blenkernel/intern/camera.cc
+++ b/source/blender/blenkernel/intern/camera.cc
@@ -172,7 +172,11 @@ static CameraCyclesCompatibilityData camera_write_cycles_compatibility_data_crea
   cycles_property_float_set(cycles_cam, "fisheye_polynomial_k2", cam->fisheye_polynomial_k2);
   cycles_property_float_set(cycles_cam, "fisheye_polynomial_k3", cam->fisheye_polynomial_k3);
   cycles_property_float_set(cycles_cam, "fisheye_polynomial_k4", cam->fisheye_polynomial_k4);
-
+  cycles_property_float_set(cycles_cam, "orthodox_tilt_x", cam->orthodox_tilt_x);
+  cycles_property_float_set(cycles_cam, "orthodox_tilt_y", cam->orthodox_tilt_y);
+  cycles_property_float_set(cycles_cam, "orthodox_shift_x", cam->orthodox_shift_x);
+  cycles_property_float_set(cycles_cam, "orthodox_shift_y", cam->orthodox_shift_y);
+  cycles_property_float_set(cycles_cam, "orthodox_factor", cam->orthodox_factor);
   id->properties = idprop_temp;
 
   return {idprop_prev, idprop_temp};
diff --git a/source/blender/makesdna/DNA_camera_types.h b/source/blender/makesdna/DNA_camera_types.h
index 3d97a17cb88..484cec7512f 100644
--- a/source/blender/makesdna/DNA_camera_types.h
+++ b/source/blender/makesdna/DNA_camera_types.h
@@ -102,6 +102,14 @@ typedef struct Camera {
   float fisheye_polynomial_k3;
   float fisheye_polynomial_k4;
 
+  /* Orthodox properties. */
+  float orthodox_tilt_x;
+  float orthodox_tilt_y;
+  float orthodox_shift_x;
+  float orthodox_shift_y;
+  float orthodox_factor;
+  char orho_pad[4];
+
   /** Old animation system, deprecated for 2.5. */
   struct Ipo *ipo DNA_DEPRECATED;
 
diff --git a/source/blender/makesrna/intern/rna_camera.cc b/source/blender/makesrna/intern/rna_camera.cc
index 586bdba10e5..c8a414922e9 100644
--- a/source/blender/makesrna/intern/rna_camera.cc
+++ b/source/blender/makesrna/intern/rna_camera.cc
@@ -921,6 +921,36 @@ void RNA_def_camera(BlenderRNA *brna)
   RNA_def_property_ui_text(prop, "Fisheye Polynomial K4", "Coefficient K4 of the lens polynomial");
   RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
 
+  prop = RNA_def_property(srna, "orthodox_shift_x", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_shift_x");
+  RNA_def_property_ui_range(prop, -2.0, 2.0, 1, 3);
+  RNA_def_property_ui_text(prop, "Orthodox shift x", "Orthodox horizontal shift");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_shift_y", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_shift_y");
+  RNA_def_property_ui_range(prop, -2.0, 2.0, 1, 3);
+  RNA_def_property_ui_text(prop, "Orhodox shift y", "Orhodox vertical shift");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_tilt_x", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_tilt_x");
+  RNA_def_property_ui_range(prop, -2.0, 2.0, 1, 3);
+  RNA_def_property_ui_text(prop, "Orthodox tilt x", "Orthodox horizontal tilt");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_tilt_y", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_tilt_y");
+  RNA_def_property_ui_range(prop, -2.0, 2.0, 1, 3);
+  RNA_def_property_ui_text(prop, "Orhodox tilt y", "Orhodox vertical tilt");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
+  prop = RNA_def_property(srna, "orthodox_factor", PROP_FLOAT, PROP_NONE);
+  RNA_def_property_float_sdna(prop, nullptr, "orthodox_factor");
+  RNA_def_property_ui_range(prop, -2.0, 2.0, 1, 3);
+  RNA_def_property_ui_text(prop, "Orhodox factor", "Orhodox factor");
+  RNA_def_property_update(prop, NC_OBJECT | ND_DRAW, "rna_Camera_update");
+
   /* pointers */
   prop = RNA_def_property(srna, "dof", PROP_POINTER, PROP_NONE);
   RNA_def_property_struct_type(prop, "CameraDOFSettings");
